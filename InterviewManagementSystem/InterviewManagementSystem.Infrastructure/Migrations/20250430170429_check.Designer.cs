// <auto-generated />
using System;
using InterviewManagementSystem.Infrastructure.Databases.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace InterviewManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(InterviewManagementSystemContext))]
    [Migration("20250430170429_check")]
    partial class check
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("CandidateId", "SkillId")
                        .HasName("CandidateSkills_pkey");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkills", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AppRoles", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AppRoleClaims_RoleId");

                    b.ToTable("AppCustomRoleClaims", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("character varying");

                    b.Property<string>("AvatarLink")
                        .HasColumnType("character varying");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("\r\n                                                to_tsvector(\r\n                                                    'english'::regconfig, \r\n                                                    (\r\n                                                        COALESCE(\"Email\", ''::character varying)::text || ' '::text || \r\n                                                        COALESCE(\"UserName\", ''::character varying)::text || ' '::text || \r\n                                                        COALESCE(\"PhoneNumber\", ''::text)\r\n                                                    )\r\n                                                )", true);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AppUsers", "IMS");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AppUserClaims_UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AppUserLogins_UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.CandidateStatus", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("CandidateStatuses_pkey");

                    b.ToTable("CandidateStatuses", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Interviews.InterviewResult", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("InterviewResults_pkey");

                    b.ToTable("InterviewResults", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Interviews.InterviewSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<short?>("CandidateStatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int?>("InterviewResultId")
                        .HasColumnType("integer");

                    b.Property<int?>("InterviewScheduleStatusId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("character varying");

                    b.Property<string>("MeetingUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("MeetingURL");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecruiterOwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("InterviewSchedules_pkey");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CandidateStatusId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InterviewResultId");

                    b.HasIndex("InterviewScheduleStatusId");

                    b.HasIndex("JobId");

                    b.HasIndex("OfferId");

                    b.HasIndex("RecruiterOwnerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InterviewSchedules", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Interviews.InterviewScheduleStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("InterviewScheduleStatuses_pkey");

                    b.ToTable("InterviewScheduleStatuses", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Jobs.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkingAddress")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Jobs_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Jobs", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Jobs.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("JobStatuses_pkey");

                    b.ToTable("JobStatuses", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Benefits_pkey");

                    b.ToTable("Benefits", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("ContractTypes_pkey");

                    b.ToTable("ContractTypes", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Departments_pkey");

                    b.ToTable("Departments", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.HighestLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("HighestLevels_pkey");

                    b.ToTable("HighestLevels", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Level", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Levels_pkey");

                    b.ToTable("Levels", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Position", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Positions_pkey");

                    b.ToTable("Positions", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Skill", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Skills_pkey");

                    b.ToTable("Skills", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.CandidateOfferStatus", b =>
                {
                    b.Property<Guid>("OfferId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<short>("CandidateStatusId")
                        .HasColumnType("smallint");

                    b.HasKey("OfferId", "CandidateId", "CandidateStatusId")
                        .HasName("CandidateOfferStatus_pkey");

                    b.HasIndex("CandidateId");

                    b.HasIndex(new[] { "OfferId" }, "CandidateOfferStatus_OfferId_key")
                        .IsUnique();

                    b.ToTable("CandidateOfferStatus", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("BasicSalary")
                        .HasColumnType("money");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InterviewScheduleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<int>("OfferStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecruiterOwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("Offers_pkey");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InterviewScheduleId");

                    b.HasIndex("LevelId");

                    b.HasIndex("OfferStatusId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RecruiterOwnerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Offers", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.OfferStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("OfferStatuses_pkey");

                    b.ToTable("OfferStatuses", "IMS");
                });

            modelBuilder.Entity("Interviewer", b =>
                {
                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InterviewScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("AppUserId", "InterviewScheduleId")
                        .HasName("Interviewers_pkey");

                    b.HasIndex("InterviewScheduleId");

                    b.ToTable("Interviewers", "IMS");
                });

            modelBuilder.Entity("JobBenefit", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("BenefitId")
                        .HasColumnType("integer");

                    b.HasKey("JobId", "BenefitId")
                        .HasName("JobBenefits_pkey");

                    b.HasIndex("BenefitId");

                    b.ToTable("JobBenefits", "IMS");
                });

            modelBuilder.Entity("JobLevel", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.HasKey("JobId", "LevelId")
                        .HasName("JobLevels_pkey");

                    b.HasIndex("LevelId");

                    b.ToTable("JobLevels", "IMS");
                });

            modelBuilder.Entity("JobSkill", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("JobId", "SkillId")
                        .HasName("JobSkills_pkey");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkills", "IMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AppUserClaims_UserId1");

                    b.ToTable("AppUserClaims", "IMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AppUserLogins_UserId1");

                    b.ToTable("AppUserLogins", "IMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", "IMS");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AppUserTokens", "IMS");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.Candidate", b =>
                {
                    b.HasBaseType("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser");

                    b.Property<string>("AttachmentLink")
                        .HasColumnType("character varying");

                    b.Property<short?>("CandidateStatusId")
                        .HasColumnType("smallint");

                    b.Property<int>("HighestLevelId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecruiterId")
                        .HasColumnType("uuid");

                    b.Property<short?>("YearsOfExperience")
                        .HasColumnType("smallint");

                    b.HasIndex("CandidateStatusId");

                    b.HasIndex("HighestLevelId");

                    b.HasIndex("JobId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Candidates", "IMS");
                });

            modelBuilder.Entity("CandidateSkill", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidateSkills_CandidateId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("CandidateSkills_SkillId_fkey");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppRoleClaim", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppRole", "Role")
                        .WithMany("AppRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("AppUsers_CreatedBy_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Department", "Department")
                        .WithMany("AppUsers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("AppUsers_DepartmentId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("AppUsers_UpdatedBy_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Department");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUserClaim", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "User")
                        .WithMany("AppUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUserLogin", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "User")
                        .WithMany("AppUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUserToken", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "User")
                        .WithMany("AppUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Interviews.InterviewSchedule", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "Candidate")
                        .WithMany("InterviewScheduleCandidates")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("InterviewSchedules_CandidateId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.CandidateStatus", "CandidateStatus")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("CandidateStatusId")
                        .HasConstraintName("InterviewSchedules_CandidateStatusId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "CreatedByNavigation")
                        .WithMany("InterviewScheduleCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("InterviewSchedules_CreatedBy_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Interviews.InterviewResult", "InterviewResult")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("InterviewResultId")
                        .HasConstraintName("InterviewSchedules_InterviewResultId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Interviews.InterviewScheduleStatus", "InterviewScheduleStatus")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("InterviewScheduleStatusId")
                        .HasConstraintName("InterviewSchedules_InterviewScheduleStatusId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Jobs.Job", "Job")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("JobId")
                        .HasConstraintName("InterviewSchedules_JobId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Offers.Offer", "Offer")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("InterviewSchedules_OfferId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "RecruiterOwner")
                        .WithMany("InterviewScheduleRecruiterOwners")
                        .HasForeignKey("RecruiterOwnerId")
                        .HasConstraintName("InterviewSchedules_RecruiterOwnerId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "UpdatedByNavigation")
                        .WithMany("InterviewScheduleUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("InterviewSchedules_UpdatedBy_fkey");

                    b.OwnsOne("InterviewManagementSystem.Domain.ValueObjects.HourPeriod", "HourPeriod", b1 =>
                        {
                            b1.Property<Guid>("InterviewScheduleId")
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly>("EndHour")
                                .HasColumnType("time without time zone")
                                .HasColumnName("EndHour");

                            b1.Property<TimeOnly>("StartHour")
                                .HasColumnType("time without time zone")
                                .HasColumnName("StartHour");

                            b1.HasKey("InterviewScheduleId");

                            b1.ToTable("InterviewSchedules", "IMS");

                            b1.WithOwner()
                                .HasForeignKey("InterviewScheduleId");
                        });

                    b.Navigation("Candidate");

                    b.Navigation("CandidateStatus");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("HourPeriod");

                    b.Navigation("InterviewResult");

                    b.Navigation("InterviewScheduleStatus");

                    b.Navigation("Job");

                    b.Navigation("Offer");

                    b.Navigation("RecruiterOwner");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Jobs.Job", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "CreatedByNavigation")
                        .WithMany("JobCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("Jobs_CreatedBy_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Jobs.JobStatus", "JobStatus")
                        .WithMany("Jobs")
                        .HasForeignKey("JobStatusId")
                        .HasConstraintName("Jobs_JobStatusId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "UpdatedByNavigation")
                        .WithMany("JobUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Jobs_UpdatedBy_fkey");

                    b.OwnsOne("InterviewManagementSystem.Domain.ValueObjects.DatePeriod", "DatePeriod", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartDate");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "IMS");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.OwnsOne("InterviewManagementSystem.Domain.ValueObjects.SalaryRange", "SalaryRange", b1 =>
                        {
                            b1.Property<Guid>("JobId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("From")
                                .HasColumnType("money")
                                .HasColumnName("From");

                            b1.Property<decimal>("To")
                                .HasColumnType("money")
                                .HasColumnName("To");

                            b1.HasKey("JobId");

                            b1.ToTable("Jobs", "IMS");

                            b1.WithOwner()
                                .HasForeignKey("JobId");
                        });

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DatePeriod");

                    b.Navigation("JobStatus");

                    b.Navigation("SalaryRange");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.CandidateOfferStatus", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.Candidate", "Candidate")
                        .WithMany("CandidateOfferStatuses")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidateOfferStatus_CandidateId_fkey");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.Offer", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "Approver")
                        .WithMany("OfferApprovers")
                        .HasForeignKey("ApproverId")
                        .HasConstraintName("Offers_ApproverId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.Candidate", "Candidate")
                        .WithMany("Offers")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("Offers_CandidateId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.ContractType", "ContractType")
                        .WithMany("Offers")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Offers_ContractTypeId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "CreatedByNavigation")
                        .WithMany("OfferCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("Offers_CreatedBy_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Department", "Department")
                        .WithMany("Offers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Offers_DepartmentId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Offers.CandidateOfferStatus", "CandidateOfferStatus")
                        .WithOne("Offer")
                        .HasForeignKey("InterviewManagementSystem.Domain.Entities.Offers.Offer", "Id")
                        .HasPrincipalKey("InterviewManagementSystem.Domain.Entities.Offers.CandidateOfferStatus", "OfferId")
                        .IsRequired()
                        .HasConstraintName("Offers_Id_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Interviews.InterviewSchedule", "InterviewSchedule")
                        .WithMany("Offers")
                        .HasForeignKey("InterviewScheduleId")
                        .HasConstraintName("Offers_InterviewScheduleId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Level", "Level")
                        .WithMany("Offers")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Offers_LevelId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Offers.OfferStatus", "OfferStatus")
                        .WithMany("Offers")
                        .HasForeignKey("OfferStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Offers_OfferStatusId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Position", "Position")
                        .WithMany("Offers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Offers_PositionId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "RecruiterOwner")
                        .WithMany("OfferRecruiterOwners")
                        .HasForeignKey("RecruiterOwnerId")
                        .HasConstraintName("Offers_RecruiterOwnerId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "UpdatedByNavigation")
                        .WithMany("OfferUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("Offers_UpdatedBy_fkey");

                    b.OwnsOne("InterviewManagementSystem.Domain.ValueObjects.DatePeriod", "DatePeriod", b1 =>
                        {
                            b1.Property<Guid>("OfferId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartDate");

                            b1.HasKey("OfferId");

                            b1.ToTable("Offers", "IMS");

                            b1.WithOwner()
                                .HasForeignKey("OfferId");
                        });

                    b.Navigation("Approver");

                    b.Navigation("Candidate");

                    b.Navigation("CandidateOfferStatus");

                    b.Navigation("ContractType");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DatePeriod");

                    b.Navigation("Department");

                    b.Navigation("InterviewSchedule");

                    b.Navigation("Level");

                    b.Navigation("OfferStatus");

                    b.Navigation("Position");

                    b.Navigation("RecruiterOwner");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Interviewer", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", null)
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .IsRequired()
                        .HasConstraintName("Interviewers_AppUserId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Interviews.InterviewSchedule", null)
                        .WithMany()
                        .HasForeignKey("InterviewScheduleId")
                        .IsRequired()
                        .HasConstraintName("Interviewers_InterviewScheduleId_fkey");
                });

            modelBuilder.Entity("JobBenefit", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Benefit", null)
                        .WithMany()
                        .HasForeignKey("BenefitId")
                        .IsRequired()
                        .HasConstraintName("JobBenefits_BenefitId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("JobBenefits_JobId_fkey");
                });

            modelBuilder.Entity("JobLevel", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("JobLevels_JobId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Level", null)
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("JobLevels_LevelId_fkey");
                });

            modelBuilder.Entity("JobSkill", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("JobSkills_JobId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("JobSkills_SkillId_fkey");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.Candidate", b =>
                {
                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.CandidateStatus", "CandidateStatus")
                        .WithMany("Candidates")
                        .HasForeignKey("CandidateStatusId")
                        .HasConstraintName("Candidates_CandidateStatusId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.HighestLevel", "HighestLevel")
                        .WithMany("Candidates")
                        .HasForeignKey("HighestLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Candidates_HighestLevelId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "IdNavigation")
                        .WithOne("CandidateIdNavigation")
                        .HasForeignKey("InterviewManagementSystem.Domain.Entities.AppUsers.Candidate", "Id")
                        .IsRequired()
                        .HasConstraintName("Candidates_Id_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.Jobs.Job", "Job")
                        .WithMany("Candidates")
                        .HasForeignKey("JobId")
                        .HasConstraintName("Candidates_JobId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.MasterData.Position", "Position")
                        .WithMany("Candidates")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Candidates_PositionId_fkey");

                    b.HasOne("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", "Recruiter")
                        .WithMany("CandidateRecruiters")
                        .HasForeignKey("RecruiterId")
                        .HasConstraintName("Candidates_RecruiterId_fkey");

                    b.Navigation("CandidateStatus");

                    b.Navigation("HighestLevel");

                    b.Navigation("IdNavigation");

                    b.Navigation("Job");

                    b.Navigation("Position");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppRole", b =>
                {
                    b.Navigation("AppRoleClaims");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.AppUser", b =>
                {
                    b.Navigation("AppUserClaims");

                    b.Navigation("AppUserLogins");

                    b.Navigation("AppUserTokens");

                    b.Navigation("CandidateIdNavigation");

                    b.Navigation("CandidateRecruiters");

                    b.Navigation("InterviewScheduleCandidates");

                    b.Navigation("InterviewScheduleCreatedByNavigations");

                    b.Navigation("InterviewScheduleRecruiterOwners");

                    b.Navigation("InterviewScheduleUpdatedByNavigations");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("JobCreatedByNavigations");

                    b.Navigation("JobUpdatedByNavigations");

                    b.Navigation("OfferApprovers");

                    b.Navigation("OfferCreatedByNavigations");

                    b.Navigation("OfferRecruiterOwners");

                    b.Navigation("OfferUpdatedByNavigations");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.CandidateStatus", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Interviews.InterviewResult", b =>
                {
                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Interviews.InterviewSchedule", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Interviews.InterviewScheduleStatus", b =>
                {
                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Jobs.Job", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Jobs.JobStatus", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.ContractType", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Department", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.HighestLevel", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Level", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.MasterData.Position", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.CandidateOfferStatus", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.Offer", b =>
                {
                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.Offers.OfferStatus", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("InterviewManagementSystem.Domain.Entities.AppUsers.Candidate", b =>
                {
                    b.Navigation("CandidateOfferStatuses");

                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
